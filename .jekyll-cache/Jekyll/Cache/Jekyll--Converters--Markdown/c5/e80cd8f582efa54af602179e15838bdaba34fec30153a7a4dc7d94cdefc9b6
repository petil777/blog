I"N<h1 id="1-도커-설치">1. 도커 설치</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- https://docs.docker.com/engine/install/ubuntu/
- 2020년 8월 기준으로 위의 공식문서대로 도커를 설치하면 된다.
	- Old version remove하고자 할 때
	- $ sudo apt-get remove docker docker-engine docker.io containerd runc
	
1. Set up repository ```  $ sudo apt-get update    $ sudo apt-get install \
apt-transport-https \
ca-certificates \
curl \
gnupg-agent \
software-properties-common ```
	
	2. Add Docker’s official GPG key: ```
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

Verify that you now have the key with the fingerprint 
9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint.

$ sudo apt-key fingerprint 0EBFCD88

pub   rsa4096 2017-02-22 [SCEA]
			9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid           [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;
sub   rsa4096 2017-02-22 [S]
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
	3. repository 추가 (x86_64 / amd64 기준)   
</code></pre></div></div>
<p>$ sudo add-apt-repository <br />
   “deb [arch=amd64] https://download.docker.com/linux/ubuntu <br />
   $(lsb_release -cs) <br />
   stable”</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	
	4. Install docker   
</code></pre></div></div>
<p>$ sudo apt-get update
 $ sudo apt-get install docker-ce docker-ce-cli containerd.io</p>

<p>설치 확인
 $ sudo docker run hello-world</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 2. Nvidia용 docker 설치
 - &lt;https://github.com/NVIDIA/nvidia-docker&gt;
 - toolkit 버전을 설치하면 nvidia-docker명령어 대신 그냥 docker로 쳐도 적용된다고 한다.
 
</code></pre></div></div>

<p>Ubuntu 16.04/18.04/20.04, Debian Jessie/Stretch/Buster</p>
<h1 id="add-the-package-repositories">Add the package repositories</h1>
<p>distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</p>

<p>sudo apt-get update &amp;&amp; sudo apt-get install -y nvidia-container-toolkit
sudo systemctl restart docker
```</p>

<h2 id="sudo-docker">sudo docker</h2>
<ul>
  <li>처음엔 sudo docker명령어를 써야 하므로 번거롭다.</li>
  <li>아래 명령어를 적용하면 재로그인 후부터 그냥 docker로 명령어를 입력해도 된다.</li>
  <li><code class="language-plaintext highlighter-rouge">$ sudo usermod -aG docker $USER</code></li>
</ul>

<h1 id="3-도커-기본-사용-명령어">3. 도커 기본 사용 명령어</h1>
<p>|옵션|example|설명|
 |—|—|—|
 |  -p  |  -p 4000:4000 or -p 4000  | &lt; 호스트:컨테이너 포트&gt; 바인딩. 번호하나만 명시하면  컨테이너 포트만 지정. 놀고 있는 호스트 컨테이너 포트중 하나와 임의 매칭됨
 | -v | -v ${PWD}:/src|  호스트 위치와 컨테이너 내부에서의 디렉토리를 마운트. 호스트 디렉토리가 우선하여 덮어씌운다.
 |-it| | 컨테이너 내부에서 터미널 사용하고자 할 때 기본적으로 붙여주면 된다.
 |–rm| | 컨테이너는 정지되어도 stop상태로 남아있다. 컨테이너가 종료될 때 자동으로 지워주도록 하는 옵션
 | -e | -e PASSWORD=1234 | 해당 이미지 내에서 요구하는 환경변수 전달
 |–network|  –net mynetwork | 어 떤 네트워크로 구성할 지 설정. 없으면 host 네트워크가 기본적으로 잡힌다.</p>
:ET